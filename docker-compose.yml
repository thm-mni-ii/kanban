services:
  
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - 8888:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - kanban-net
    depends_on:
      kandb:
        condition: service_healthy
        restart: true

  
  kandb:
    image: postgres:alpine
    restart: always
    container_name: kandb
    command: -c 'max_connections=200'
    stdin_open: true
    tty: true
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d kandb -U kanuser"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - ${KANDB_PORT}:${KANDB_PORT}
    volumes:
      - kandb-data:/var/lib/postgresql/data
    networks:
      - kanban-net
  
  api:
    container_name: api_container
    build: ./backend/api
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "3000:3000"
    depends_on:
      kandb:
        condition: service_healthy
        restart: true
    networks:
      - kanban-net
  
  sql-setup-runner:
    container_name: sql-setup-runner
    build: ./backend/database/setup
    env_file:
      - .env
    depends_on:
      kandb:
        condition: service_healthy
        restart: false
    networks:
      - kanban-net
  



networks:
  kanban-net:
    name: kan-net
    

volumes:
  kandb-data:
  pgadmin-data:

    
    